import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{r as p,o as t,c as e,a as n,b as o,e as c,d as l}from"./app.d6b42b88.js";const i={},u=n("p",null,"\uD574\uB2F9\uD398\uC774\uC9C0\uB294 2022\uB144 3\uC6D4 \uB178\uC158\uC5D0\uC11C \uB9C8\uC774\uADF8\uB808\uC774\uC158 \uB418\uC5C8\uC2B5\uB2C8\uB2E4.",-1),k={href:"https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/",target:"_blank",rel:"noopener noreferrer"},r=c("\uBB38\uC81C \uB9C1\uD06C"),d=l(`<h2 id="\u1106\u116E\u11AB\u110C\u1166-\u1109\u1165\u11AF\u1106\u1167\u11BC" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1166-\u1109\u1165\u11AF\u1106\u1167\u11BC" aria-hidden="true">#</a> \uBB38\uC81C \uC124\uBA85</h2><p>&#39;(&#39; , &#39;)&#39; \uBC0F \uC18C\uBB38\uC790 \uC601\uC5B4 \uBB38\uC790\uB85C \uC774\uB8E8\uC5B4\uC9C4 \uBB38\uC790\uC5F4 s\uAC00 \uC81C\uACF5\uB429\uB2C8\uB2E4. \uAD04\uD638 \uBB38\uC790\uC5F4\uC774 \uC720\uD6A8\uD558\uB3C4\uB85D \uCD5C\uC18C \uC218\uC758 \uAD04\uD638(&#39;(&#39; \uB610\uB294 &#39;)&#39;\uB97C \uC81C\uAC70\uD574\uC11C \uBC18\uD658\uD558\uC2DC\uC624. \uC5EC\uAE30\uC11C \uC720\uD6A8\uD558\uB2E4\uB294 \uAC83\uC740 &#39;(A)&#39; \uCC98\uB7FC \uAD04\uD638\uAC00 \uC815\uC0C1\uC801\uC73C\uB85C \uB2EB\uD600\uC788\uB2E4\uB294 \uAC83\uC744 \uB9D0\uD569\uB2C8\uB2E4.</p><h2 id="\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \uBB38\uC81C \uD480\uC774</h2><ol><li><p>\uC8FC\uC5B4\uC9C4 \uBB38\uC790\uC5F4\uC744 \uC21C\uD68C\uD558\uBA74\uC11C stack\uC5D0 \uD574\uB2F9 \uAC12\uB4E4\uC744 \uC800\uC7A5\uD55C\uB2E4. \uC774\uB54C <code>openCount</code> \uBCC0\uC218\uC5D0 &#39;(&#39;\uACBD\uC6B0\uC5D0\uB294 +1 &#39;)&#39;\uC77C \uACBD\uC6B0\uC5D0\uB294 -1\uC744 \uCCB4\uD06C\uD574\uC900\uB2E4. \uB9CC\uC57D <code>openCount</code> \uBCC0\uC218\uC758 \uAC12\uC774 0\uBCF4\uB2E4 \uD06C\uC9C0 \uC54A\uC73C\uBA74 \uADF8\uB54C \uB4E4\uC5B4\uC624\uB294 &#39;)&#39;\uAC12\uC740 \uC720\uD6A8\uD558\uC9C0 \uC54A\uAE30 \uB54C\uBB38\uC5D0 stack\uC5D0 \uB123\uC9C0 \uC54A\uB294\uB2E4.</p></li><li><p>\uADF8 \uD6C4 \uD574\uB2F9 stack\uC744 \uB300\uC0C1\uC73C\uB85C <code>closeCount</code> \uAC12\uC744 \uACC4\uC0B0\uD558\uACE0 \uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 &#39;(&#39;\uC744 \uC81C\uAC70\uD558\uB294 \uACFC\uC815\uC744 \uAC70\uCCD0\uC8FC\uBA74 \uB2F5\uC774 \uB098\uC628\uB2E4.</p></li></ol><h2 id="\u1111\u116E\u11AF\u110B\u1175\u110F\u1169\u1103\u1173" tabindex="-1"><a class="header-anchor" href="#\u1111\u116E\u11AF\u110B\u1175\u110F\u1169\u1103\u1173" aria-hidden="true">#</a> \uD480\uC774\uCF54\uB4DC</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">minRemoveToMakeValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> answer <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> openCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> x <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">!=</span> <span class="token char">&#39;)&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// close \uBB38\uC790\uAC00 \uC544\uB2C8\uBA74 \uB2F5\uC5D0 \uBC14\uB85C \uB123\uAE30</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    openCount<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> openCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//close \uBB38\uC790\uC778\uB370 openNum\uC774 0 \uC774 \uC544\uB2C8\uBA74 // \uC774\uBD80\uBD84\uC73C\uB85C \uC778\uD574 \uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 &#39;)&#39;\uBD80\uBD84\uC740 \uC81C\uAC70\uB41C\uB2E4.</span>
                openCount<span class="token operator">--</span><span class="token punctuation">;</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
	    <span class="token punctuation">}</span><span class="token comment">//for</span>

        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> answerStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> closeCount <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
             <span class="token keyword">char</span> ch <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span> ch <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span> <span class="token operator">&amp;&amp;</span> closeCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \uC774\uBD80\uBD84\uC73C\uB85C \uC778\uD574 \uC720\uD6A8\uD558\uC9C0 \uC54A\uC740 &#39;(&#39;\uBD80\uBD84\uC740 \uC81C\uAC70\uB41C\uB2E4.</span>
                answerStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span> ch <span class="token operator">==</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    closeCount<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> ch <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    closeCount<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>answerStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            answer <span class="token operator">+=</span> answerStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> answer<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function v(m,b){const s=p("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",k,[r,o(s)])]),d])}var f=a(i,[["render",v],["__file","minimum-remove-to-make-valid-parentheses.html.vue"]]);export{f as default};
