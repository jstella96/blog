import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,o as p,c as e,a as n,b as o,e as c,d as l}from"./app.d6b42b88.js";const u={},i=n("p",null,"\uD574\uB2F9\uD398\uC774\uC9C0\uB294 2022\uB144 3\uC6D4 \uB178\uC158\uC5D0\uC11C \uB9C8\uC774\uADF8\uB808\uC774\uC158 \uB418\uC5C8\uC2B5\uB2C8\uB2E4.",-1),k={href:"https://leetcode.com/problems/word-break/",target:"_blank",rel:"noopener noreferrer"},r=c("\uBB38\uC81C\uB9C1\uD06C"),d=l(`<h2 id="\u1106\u116E\u11AB\u110C\u1166-\u1109\u1165\u11AF\u1106\u1167\u11BC" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1166-\u1109\u1165\u11AF\u1106\u1167\u11BC" aria-hidden="true">#</a> \uBB38\uC81C \uC124\uBA85</h2><p>\uBB38\uC790\uC5F4 <code>str</code>\uACFC <code>word</code>\uAC00 \uC8FC\uC5B4\uC9C0\uB294\uB370 \uD574\uB2F9 <code>word</code>\uB97C \uC870\uD569\uD574\uC11C <code>str</code>\uC744 \uB9CC\uB4E4 \uC218 \uC788\uB294\uAC00?</p><h2 id="\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \uBB38\uC81C \uD480\uC774</h2><p>\uD480\uC7741:<br> \uBA54\uBAA8\uB9AC\uC81C\uC774\uC158\uC744 \uD574\uC11C , String \uC744 \uC790\uB974\uBA74\uC11C \uAC04\uB2E4 \uD480\uC7742:<br> map \uC548\uC5D0 key\uB85C \uAC01 \uC54C\uD30C\uBCB3\uC744 value\uC5D0 list\uC5D0 \uAC01 \uB2E8\uC5B4\uB97C \uB123\uB294\uB2E4. \uADF8 \uD6C4 \uD574\uB2F9 str\uC758 \uC2DC\uC791\uBD80\uBD84 \uC54C\uD30C\uBCB3\uC5D0 \uD574\uB2F9\uD558\uB294 list\uB97C \uB3CC\uB824\uC900\uB2E4. \uADF8\uB2E8\uC5B4\uB9CC\uD07C \uC55E\uC744 \uC790\uB978 \uD6C4 str\uC774 \uB2E4 \uC0AC\uB77C\uC9C8 \uB54C \uAE4C\uC9C0 \uD574\uB2F9\uACFC\uC815\uC744 \uBC18\uBCF5\uD55C\uB2E4. \uD558\uB098\uC758 \uB8E8\uD2B8\uB77C\uB3C4 true\uAC00 \uB098\uC624\uBA74 \uB41C\uB2E4.</p><p><strong>\uC8FC\uC758\uC810</strong>: subSting\uC740 O(1)\uC774 \uC544\uB2C8\uB2E4.</p><h2 id="\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173" tabindex="-1"><a class="header-anchor" href="#\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173" aria-hidden="true">#</a> \uD480\uC774 \uCF54\uB4DC</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">wordBreakMemo</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>wordDict<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">wordBreakMemo</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordDict<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token comment">//\uC608\uC678\uCC98\uB9AC1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//\uC774\uBBF8 \uBC29\uBB38\uD588\uB2E4. \uC788\uB2E4.</span>
            <span class="token keyword">return</span> memo<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> end <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>wordDict<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wordBreakMemo</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> wordDict<span class="token punctuation">,</span> end<span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//\uC55E\uC5D0\uC11C \uC790\uB978 \uAC12\uACFC, \uB4A4\uC5D0\uC788\uB294 \uAC12\uB4E4\uB85C\uB3C4 \uC7AC\uADC0\uB97C \uB3CC\uB838\uC744 \uB54C true \uB77C\uBA74</span>
                <span class="token keyword">return</span> memo<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function m(v,b){const s=t("ExternalLinkIcon");return p(),e("div",null,[i,n("p",null,[n("a",k,[r,o(s)])]),d])}var f=a(u,[["render",m],["__file","word-break.html.vue"]]);export{f as default};
