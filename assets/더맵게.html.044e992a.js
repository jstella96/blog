import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,o as p,c as t,a as n,b as o,e as c,d as l}from"./app.d6b42b88.js";const i={},u=n("p",null,"\uD574\uB2F9\uD398\uC774\uC9C0\uB294 2022\uB144 3\uC6D4 \uB178\uC158\uC5D0\uC11C \uB9C8\uC774\uADF8\uB808\uC774\uC158 \uB418\uC5C8\uC2B5\uB2C8\uB2E4.",-1),r={href:"https://programmers.co.kr/learn/courses/30/lessons/42626",target:"_blank",rel:"noopener noreferrer"},k=c("\uBB38\uC81C \uB9C1\uD06C"),d=l(`<h2 id="\u1106\u116E\u11AB\u110C\u1166-\u1109\u1165\u11AF\u1106\u1167\u11BC" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1166-\u1109\u1165\u11AF\u1106\u1167\u11BC" aria-hidden="true">#</a> \uBB38\uC81C \uC124\uBA85</h2><p>\uBAA8\uB4E0 \uC74C\uC2DD\uC758 \uC2A4\uCF54\uBE4C \uC9C0\uC218\uB97C K \uC774\uC0C1\uC73C\uB85C \uB9CC\uB4E4\uB824\uACE0\uD55C\uB2E4. \uBAA8\uB4E0 \uC74C\uC2DD\uC758 \uC2A4\uCF54\uBE4C \uC9C0\uC218\uB97C K \uC774\uC0C1\uC73C\uB85C \uB9CC\uB4E4\uAE30 \uC704\uD574\uC11C\uB294 \uC2A4\uCF54\uBE4C \uC9C0\uC218\uAC00 \uAC00\uC7A5 \uB0AE\uC740 \uB450 \uAC1C\uC758 \uC74C\uC2DD\uC744 \uC544\uB798\uC640 \uAC19\uC774 \uD2B9\uBCC4\uD55C \uBC29\uBC95\uC73C\uB85C \uC11E\uC5B4 \uC0C8\uB85C\uC6B4 \uC74C\uC2DD\uC744 \uB9CC\uB4E4\uC5B4\uC57C \uD55C\uB2E4.<br><code>\uC11E\uC740 \uC74C\uC2DD\uC758 \uC2A4\uCF54\uBE4C \uC9C0\uC218 = \uAC00\uC7A5 \uB9F5\uC9C0 \uC54A\uC740 \uC74C\uC2DD\uC758 \uC2A4\uCF54\uBE4C \uC9C0\uC218 + (\uB450 \uBC88\uC9F8\uB85C \uB9F5\uC9C0 \uC54A\uC740 \uC74C\uC2DD\uC758 \uC2A4\uCF54\uBE4C \uC9C0\uC218 * 2)</code> \uC74C\uC2DD\uC758 \uC2A4\uCF54\uBE4C \uC9C0\uC218\uB97C \uB2F4\uC740 \uBC30\uC5F4 <code>scoville</code>\uACFC \uC6D0\uD558\uB294 \uC2A4\uCF54\uBE4C \uC9C0\uC218 <code>K</code>\uAC00 \uC8FC\uC5B4\uC9C8 \uB54C, \uBAA8\uB4E0 \uC74C\uC2DD\uC758 \uC2A4\uCF54\uBE4C \uC9C0\uC218\uB97C <code>K</code> \uC774\uC0C1\uC73C\uB85C \uB9CC\uB4E4\uAE30 \uC704\uD574 \uC11E\uC5B4\uC57C \uD558\uB294 \uCD5C\uC18C \uD69F\uC218\uB97C return \uD558\uB3C4\uB85D solution \uD568\uC218\uB97C \uC791\uC131\uD574\uB77C.</p><h2 id="\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \uBB38\uC81C \uD480\uC774</h2><ol><li><p>Java \uD480\uC774<br> \uC804\uD615\uC801\uC778 priorityQueue / heap \uBB38\uC81C\uC774\uB2E4. PriorityQueue\uB97C \uC624\uB984\uCC28\uC21C\uC73C\uB85C \uC815\uB82C\uB418\uAC8C \uD55C \uD6C4(\uAE30\uBCF8\uC124\uC815, \uB0B4\uB9BC\uCC28\uC21C\uC73C\uB85C \uC815\uB82C\uD560 \uC2DC Collections.reverseOrder() \uB9E4\uAC1C\uBCC0\uC218\uB85C \uC804\uB2EC) \uC8FC\uC5B4\uC9C4 scoville \uBC30\uC5F4\uC744 PriorityQueue\uC5D0 \uB123\uC740 \uD6C4 while\uBB38\uC73C\uB85C \uAC00\uC7A5 \uB0AE\uC740 scoville\uC758 \uAC12\uC774 K\uC774\uC0C1\uC774 \uB098\uC62C\uB54C\uAE4C\uC9C0 \uBC18\uBCF5\uD55C\uB2E4. \uBC18\uBCF5\uBB38 \uC548\uC5D0\uC11C 2\uAC1C\uC758 \uCD5C\uC18C \uAC12\uC744 \uAEBC\uB0B4\uACE0 \uACC4\uC0B0\uD558\uC5EC \uB2E4\uC2DC PriorityQueue\uC5D0 add \uD55C\uB2E4.</p></li><li><p>JavaScript \uD480\uC774<br> \uC804\uD615\uC801\uC778 Heap \uBB38\uC81C\uC774\uB2E4. \uBC30\uC5F4\uC758 shift()\uC5F0\uC0B0\uC744 \uD1B5\uD574 \uD050 \uC5F0\uC0B0\uC744 \uD574\uC900\uB2E4. \uC8FC\uC5B4\uC9C4 scoville\uBC30\uC5F4\uC744 \uC624\uB984\uCC28\uC21C \uC815\uB82C\uD574 \uC900 \uD6C4 while\uBB38\uC73C\uB85C \uAC00\uC7A5 \uB0AE\uC740 scoville\uC758 \uAC12\uC774 K\uC774\uC0C1\uC774 \uB098\uC62C\uB54C\uAE4C\uC9C0 \uBC18\uBCF5\uD55C\uB2E4. \uBC18\uBCF5\uBB38 \uC548\uC5D0\uC11C 2\uAC1C\uC758 \uCD5C\uC18C \uAC12\uC744 \uAEBC\uB0B4\uACE0 \uACC4\uC0B0\uD558\uC5EC \uB2E4\uC2DC \uBC30\uC5F4\uC5D0 push() \uD55C\uB2E4. \uB9E4 push\uC2DC\uB9C8\uB2E4 \uBC30\uC5F4\uC815\uB82C\uC744 \uB2E4\uC2DC\uD574\uC918\uC57C \uD55C\uB2E4.</p></li></ol><h2 id="\u1111\u116E\u11AF\u110B\u1175\u110F\u1169\u1103\u1173-java" tabindex="-1"><a class="header-anchor" href="#\u1111\u116E\u11AF\u110B\u1175\u110F\u1169\u1103\u1173-java" aria-hidden="true">#</a> \uD480\uC774\uCF54\uB4DC Java</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scoville<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> answer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> aScoville <span class="token operator">:</span> scoville<span class="token punctuation">)</span><span class="token punctuation">{</span>
            priorityQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>aScoville<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            answer<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> first <span class="token operator">=</span> priorityQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> second <span class="token operator">=</span> priorityQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> newSocvile <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token punctuation">(</span> second <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            priorityQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>newSocvile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> answer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173-javascript" tabindex="-1"><a class="header-anchor" href="#\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173-javascript" aria-hidden="true">#</a> \uD480\uC774 \uCF54\uB4DC JavaScript</h2><ul><li>\uD574\uB2F9\uBB38\uC81C\uB294 \uC790\uBC14\uC2A4\uD06C\uB9BD\uD2B8 \uCC44\uC810\uC744 \uC9C0\uC6D0 \uC548\uD568. \uD14C\uC2A4\uD2B8 \uCF54\uB4DC \uD1B5\uACFC</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">scoville<span class="token punctuation">,</span> <span class="token constant">K</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>scoville<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>scoville<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scoville<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    answer<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> first <span class="token operator">=</span> scoville<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> second <span class="token operator">=</span> scoville<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> newSocvile <span class="token operator">=</span> first <span class="token operator">+</span> second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    scoville<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newSocvile<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> answer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function v(m,b){const s=e("ExternalLinkIcon");return p(),t("div",null,[u,n("p",null,[n("a",r,[k,o(s)])]),d])}var y=a(i,[["render",v],["__file","\uB354\uB9F5\uAC8C.html.vue"]]);export{y as default};
