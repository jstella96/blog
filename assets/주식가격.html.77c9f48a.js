import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{r as p,o as t,c as e,a as n,b as o,e as c,d as i}from"./app.d6b42b88.js";const l={},u=n("p",null,"\uD574\uB2F9\uD398\uC774\uC9C0\uB294 2022\uB144 3\uC6D4 \uB178\uC158\uC5D0\uC11C \uB9C8\uC774\uADF8\uB808\uC774\uC158 \uB418\uC5C8\uC2B5\uB2C8\uB2E4.",-1),k={href:"https://programmers.co.kr/learn/courses/30/lessons/42584",target:"_blank",rel:"noopener noreferrer"},r=c("\uBB38\uC81C \uB9C1\uD06C"),d=i(`<h2 id="\u1106\u116E\u11AB\u110C\u1166-\u1109\u1165\u11AF\u1106\u1167\u11BC" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1166-\u1109\u1165\u11AF\u1106\u1167\u11BC" aria-hidden="true">#</a> \uBB38\uC81C \uC124\uBA85</h2><p>\uCD08 \uB2E8\uC704\uB85C \uAE30\uB85D\uB41C \uC8FC\uC2DD\uAC00\uACA9\uC774 \uB2F4\uAE34 \uBC30\uC5F4 <code>prices</code>\uAC00 \uB9E4\uAC1C\uBCC0\uC218\uB85C \uC8FC\uC5B4\uC9C8 \uB54C, \uAC00\uACA9\uC774 \uB5A8\uC5B4\uC9C0\uC9C0 \uC54A\uC740 \uAE30\uAC04\uC740 \uBA87 \uCD08\uC778\uC9C0\uB97C return \uD574\uB77C</p><h2 id="\u110B\u1175\u11B8\u110E\u116E\u11AF\u1105\u1167\u11A8-\u110B\u1168\u1109\u1175" tabindex="-1"><a class="header-anchor" href="#\u110B\u1175\u11B8\u110E\u116E\u11AF\u1105\u1167\u11A8-\u110B\u1168\u1109\u1175" aria-hidden="true">#</a> \uC785\uCD9C\uB825 \uC608\uC2DC</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: prices = [1, 2, 3, 2, 3]
Output: [4, 3, 1, 1, 0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u1106\u116E\u11AB\u110C\u1166-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \uBB38\uC81C \uD480\uC774</h2><p><strong>&lt;\uD480\uC774 1 - brute force&gt;</strong></p><ol><li>\uC8FC\uC2DD\uAC00\uACA9\uC744 \uC774\uC911 \uC21C\uD68C\uD55C\uB2E4.</li><li>\uAC01 \uC8FC\uC2DD\uAC00\uACA9\uB2F9 \uAC00\uACA9\uC774 \uB5A8\uC5B4\uC9C0\uB294 \uC2DC\uC810\uC744 \uAE30\uB85D\uD558\uACE0 break \uD55C\uB2E4.</li></ol><p>\uC2DC\uAC04\uBCF5\uC7A1\uB3C4: O(n^2)<br> \uBCF4\uC644\uC810: \uD480\uC774\uAC00 \uC9C1\uAD00\uC801\uC774\uC9C0\uB9CC, \uC2DC\uAC04\uBCF5\uC7A1\uB3C4\uAC00 \uD06C\uB2E4.</p><p><strong>&lt;\uD480\uC774 2&gt;</strong></p><ol><li>stack \uC120\uC5B8, \uD574\uB2F9 stack\uC740 \uAC12\uC774 \uB5A8\uC5B4\uC9C0\uAE30 \uC804\uAE4C\uC9C0\uC758 \uC8FC\uC2DD\uAC00\uACA9\uC744 \uC800\uC7A5\uD574 \uB193\uB294 \uC6A9\uB3C4\uB85C \uC0AC\uC6A9\uB41C\uB2E4.</li><li>\uC8FC\uC2DD\uAC00\uACA9 \uBC30\uC5F4\uC744 for\uBB38 \uC73C\uB85C \uC21C\uD68C\uD558\uBA74\uC11C stack\uC5D0 \uD574\uB2F9 \uC8FC\uC2DD\uAC00\uACA9\uC758 index\uB97C \uB123\uB294\uB2E4.</li><li>\uB9CC\uC57D \uD574\uB2F9 price\uAC00\uACA9\uC774 \uC774\uC804 \uC8FC\uC2DD\uAC00\uACA9\uBCF4\uB2E4 \uC791\uB2E4\uBA74 while\uBB38\uC744 \uB3CC\uBA74\uC11C \uAC00\uACA9\uC774 \uB5A8\uC5B4\uC9C0\uAE30\uAE4C\uC9C0\uC758 \uAE30\uAC04\uC744 terms \uBC30\uC5F4\uC5D0 \uC800\uC7A5\uD55C\uB2E4.</li><li>for\uBB38\uC774 \uB05D\uB098\uACE0\uB3C4 stack \uAC12\uC774 \uB0A8\uC544 \uC788\uB294 \uACBD\uC6B0\uB294 \uB05D\uAE4C\uC9C0 \uAC00\uACA9\uC774 \uB5A8\uC5B4\uC9C4 \uAC12\uC774 \uC5C6\uC5C8\uB2E4\uB294 \uAC83 \uC774\uBBC0\uB85C \uB9C8\uC9C0\uB9C9 \uC9C0\uC810\uC774 \uAC12\uC774 \uB5A8\uC5B4\uC9C4 \uC2DC\uC810\uC774 \uB41C\uB2E4.</li></ol><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>\uC774 \uBB38\uC81C\uB97C stack \uC73C\uB85C \uD480\uC744 \uC218 \uC788\uB2E4\uB294 \uD78C\uD2B8\uB294</p><ol><li>\uB2F4\uB294\uB2E4 : \uD6C4\uC5D0 \uD3C9\uAC00\uAC00 \uD544\uC694\uD558\uB2E4, \uC544\uC9C1 \uD3C9\uAC00 \uD560 \uC218 \uC5C6\uB2E4.</li><li>\uBE80\uB2E4 : \uD55C\uBC88 \uD3C9\uAC00 \uD588\uC73C\uBA74 \uB2E4\uC2DC \uC2E0\uACBD\uC4F0\uC9C0 \uC54A\uC544\uB3C4 \uB41C\uB2E4.</li><li>\uADDC\uCE59\uC131\uC774 \uC788\uB2E4. \uCD5C\uC0C1\uB2E8\uC5D0\uC11C \uADDC\uCE59\uC774 \uC5B4\uAE0B\uB0AC\uC73C\uBA74 \uB4A4\uC5D0 \uC788\uB294 \uAC12\uB4E4\uC740 \uACE0\uB824\uD558\uC9C0 \uC54A\uC544\uB3C4 \uB41C\uB2E4. =&gt; \uADF8\uB7EC\uAE30\uC5D0 O(n)\uC774 \uB420 \uC218 \uC788\uB2E4.</li></ol><p>\uC6B0\uB9AC\uAC00 \uC8FC\uC2DD\uAC00\uACA9 \uC313\uC77C \uB54C \uC544\uC9C1 \uC54C \uC218 \uC5C6\uC9C0\uB9CC, \uBE7C\uBA74\uC11C \uD310\uB2E8\uD55C\uB2E4.</p></div><h2 id="\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173-java-\u1111\u116E\u11AF\u110B\u1175-1" tabindex="-1"><a class="header-anchor" href="#\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173-java-\u1111\u116E\u11AF\u110B\u1175-1" aria-hidden="true">#</a> \uD480\uC774 \uCF54\uB4DC Java &amp; \uD480\uC774 1</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> i<span class="token punctuation">;</span> z <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> z <span class="token operator">-</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">&lt;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> answer<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173-java-\u1111\u116E\u11AF\u110B\u1175-2" tabindex="-1"><a class="header-anchor" href="#\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173-java-\u1111\u116E\u11AF\u110B\u1175-2" aria-hidden="true">#</a> \uD480\uC774 \uCF54\uB4DC Java &amp; \uD480\uC774 2</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> terms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> prices<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> beginIdx <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                terms<span class="token punctuation">[</span>beginIdx<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> beginIdx<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\uB9C8\uC9C0\uB9C9\uAE4C\uC9C0 \uB5A8\uC5B4\uC9C0\uC9C0 \uC54A\uC740 \uAC12 \uCC98\uB9AC</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> beginIdx <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            terms<span class="token punctuation">[</span>beginIdx<span class="token punctuation">]</span> <span class="token operator">=</span> len <span class="token operator">-</span> beginIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> terms<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173-javascript-\u1111\u116E\u11AF\u110B\u1175-2" tabindex="-1"><a class="header-anchor" href="#\u1111\u116E\u11AF\u110B\u1175-\u110F\u1169\u1103\u1173-javascript-\u1111\u116E\u11AF\u110B\u1175-2" aria-hidden="true">#</a> \uD480\uC774 \uCF54\uB4DC JavaScript &amp; \uD480\uC774 2</h2><ul><li>\uD504\uB85C\uADF8\uB798\uBA38\uC2A4\uC5D0\uC11C JavaScript \uCC44\uC810 \uC9C4\uD589\uC548\uD568. \uD14C\uC2A4\uD2B8 \uCF54\uB4DC\uAE4C\uC9C0\uB9CC \uD655\uC778</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> originLen <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  prices <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>item<span class="token punctuation">,</span> idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>nowPrice<span class="token punctuation">,</span> nowIndex<span class="token punctuation">]</span> <span class="token keyword">of</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nowPrice <span class="token operator">&lt;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token punctuation">[</span>prevPrice<span class="token punctuation">,</span> prevIndex<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      answer<span class="token punctuation">[</span>prevIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nowIndex <span class="token operator">-</span> prevIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nowPrice<span class="token punctuation">,</span> nowIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>price<span class="token punctuation">,</span> index<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    answer<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> originLen <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> index<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> answer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">solution</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 3 1 1 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function v(m,b){const s=p("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",k,[r,o(s)])]),d])}var g=a(l,[["render",v],["__file","\uC8FC\uC2DD\uAC00\uACA9.html.vue"]]);export{g as default};
